name: Release Build

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g. v1.0.0)'
        required: true
      release_name:
        description: 'Release name (e.g. TaiwanBusFlet v1.0.0)'
        required: true
      release_body:
        description: 'Release description'
        required: false
        default: ''

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get short Git commit hash
        run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Replace version and update channel in config.py
        run: |
          sed -i 's/hash = ".*"/hash = "'$COMMIT_HASH'"/' src/config.py
          sed -i 's/update_channel = ".*"/update_channel = "release"/' src/config.py

      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Decode keystore
        run: |
          echo "$KEYSTORE_BASE64" | base64 --decode > sign.jks
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      - name: Build APK
        run: |
          poetry run flet build apk --verbose --no-rich-output --compile-app --compile-packages --android-signing-key-store "$PWD/sign.jks" --android-signing-key-store-password "$KEYSTORE_PASSWORD" --android-signing-key-password "$KEYSTORE_PASSWORD" --android-signing-key-alias "$KEY_ALIAS" --build-version "$COMMIT_HASH"
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: taiwanbusflet-android
          path: build/apk

  build-ios:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get short Git commit hash
        run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Replace version and update channel in config.py
        run: |
          sed -i '' 's/hash = ".*"/hash = "'$COMMIT_HASH'"/' src/config.py
          sed -i '' 's/update_channel = ".*"/update_channel = "release"/' src/config.py

      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Install iOS 17 runtime
        run: |
          sudo xcodebuild -downloadPlatform iOS

      - name: Build IPA
        run: |
          poetry run flet build ipa --verbose --no-rich-output --compile-app --compile-packages

      - name: Generate unsigned IPA
        run: |
          mkdir build/ipa/temp/
          mkdir build/ipa/temp/Payload/
          mv build/ipa/*.xcarchive/Products/Applications/*.app build/ipa/temp/Payload/
          rm -rf build/ipa/*.xcarchive
          cd build/ipa/temp/
          zip -r Generated_IPA.zip Payload
          mv Generated_IPA.zip ../Generated_IPA.ipa
          cd ../../../
          rm -rf build/ipa/temp

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: taiwanbusflet-ios
          path: build/ipa

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get short Git commit hash
        run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Replace version and update channel in config.py
        run: |
          sed -i '' 's/hash = ".*"/hash = "'$COMMIT_HASH'"/' src/config.py
          sed -i '' 's/update_channel = ".*"/update_channel = "release"/' src/config.py

      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Build macOS
        run: |
          poetry run flet build macos --verbose --no-rich-output --compile-app --compile-packages --build-version "$COMMIT_HASH"

      - name: Upload macOS
        uses: actions/upload-artifact@v4
        with:
          name: taiwanbusflet-macos
          path: build/macos
      
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Get short Git commit hash
        run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Replace version and update channel in config.py
        run: |
          sed -i 's/hash = ".*"/hash = "'$COMMIT_HASH'"/' src/config.py
          sed -i 's/update_channel = ".*"/update_channel = "release"/' src/config.py

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Build Windows
        run: |
          poetry run flet build windows --verbose --no-rich-output --compile-app --compile-packages --build-version "$COMMIT_HASH"

      - name: Upload Windows
        uses: actions/upload-artifact@v4
        with:
          name: taiwanbusflet-windows
          path: build/windows

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      
      - name: Get short Git commit hash
        run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Replace version and update channel in config.py
        run: |
          sed -i 's/hash = ".*"/hash = "'$COMMIT_HASH'"/' src/config.py
          sed -i 's/update_channel = ".*"/update_channel = "release"/' src/config.py
      
      - name: Patch for linux build
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Build Linux
        run: |
          poetry run flet build linux --verbose --no-rich-output --compile-app --compile-packages --build-version "$COMMIT_HASH"

      - name: Upload Linux
        uses: actions/upload-artifact@v4
        with:
          name: taiwanbusflet-linux
          path: build/linux

  build-web:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      
      - name: Get short Git commit hash
        run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Replace version and update channel in config.py
        run: |
          sed -i 's/hash = ".*"/hash = "'$COMMIT_HASH'"/' src/config.py
          sed -i 's/update_channel = ".*"/update_channel = "release"/' src/config.py

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Build Web
        run: |
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}, USER: ${GITHUB_REPOSITORY%/*}, PROJECT_BASE_URL: ${GITHUB_REPOSITORY#*/}"
          poetry run flet build web --verbose --no-rich-output --compile-app --compile-packages --build-version "$COMMIT_HASH" --base-url ${GITHUB_REPOSITORY#*/} --route-url-strategy hash

      - name: Upload Web
        uses: actions/upload-pages-artifact@v3
        with:
          name: taiwanbusflet-web
          path: build/web

  deploy:
    needs: build-web  # wait for the "build" job to get done before executing this "deploy" job

    runs-on: ubuntu-latest

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Deploy to GitHub Pages ðŸš€
        if: github.event_name == 'push'  # deploy only on push
        id: deployment
        uses: actions/deploy-pages@v4.0.5
        with:
          artifact_name: taiwanbusflet-web
    
  release-android-apks:
    name: Release APKs to GitHub
    needs: [build-android, build-ios, build-macos, build-windows, build-linux, build-web, deploy]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      discussions: write
    steps:
      - name: Download all files
        uses: actions/download-artifact@v4
        with:
          path: ./release_files

      - name: Zip for Windows
        if: needs.build-windows.result == 'success'
        run: |
          cd release_files/taiwanbusflet-windows
          zip -r ../taiwanbusflet-windows.zip *
          cd ../..

      - name: Zip for macOS
        if: needs.build-macos.result == 'success'
        run: |
          cd release_files/taiwanbusflet-macos
          zip -r ../taiwanbusflet-macos.zip *
          cd ../..
    
      - name: Zip for Linux
        if: needs.build-linux.result == 'success'
        run: |
          cd release_files/taiwanbusflet-linux
          zip -r ../taiwanbusflet-linux.zip *
          cd ../..

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          name: ${{ github.event.inputs.release_name }}
          body: ${{ github.event.inputs.release_body }}
          draft: true
          files: |
            release_files/**/*.apk
            release_files/**/*.ipa
            release_files/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}